<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutorial on Charisse Writes</title>
    <link>https://www.charisseysabel.com/categories/tutorial/</link>
    <description>Recent content in Tutorial on Charisse Writes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 22 Apr 2018 08:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://www.charisseysabel.com/categories/tutorial/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Simple Trello Replica using React [Part 1]</title>
      <link>https://www.charisseysabel.com/post/2018-04-22-trello-replica-using-react/</link>
      <pubDate>Sun, 22 Apr 2018 08:00:00 +0000</pubDate>
      
      <guid>https://www.charisseysabel.com/post/2018-04-22-trello-replica-using-react/</guid>
      <description>Trello has been one of my favorite productivity apps because of its straightforwardness and the amount of things that you can do with such a simple interface. I wanted to experiment, so I created a simple drag and drop component in React that imitates Trello&amp;rsquo;s functionality using the HTML5 Drag and Drop API.
Prerequisites  Basic knowledge of React Node and NPM installed create-react-app for a fast setup.  What&amp;rsquo;s in the Drag and Drop API?</description>
    </item>
    
    <item>
      <title>Increase Color Contrast in React with CSS Custom Properties</title>
      <link>https://www.charisseysabel.com/post/2018-02-23-increase-color-contrast-with-css-vars/</link>
      <pubDate>Fri, 23 Feb 2018 09:00:00 +0000</pubDate>
      
      <guid>https://www.charisseysabel.com/post/2018-02-23-increase-color-contrast-with-css-vars/</guid>
      <description>I’ve heard of CSS Custom Properties before, although I didn’t think about using it until I came across a problem: how can I change styles dynamically if CSS Preprocessors do not support it?
Motivation One of the most convenient features of a CSS Preprocessors is the fact that you can create variables, much like the same way as how you declare a variable in other programming languages. It makes our lives easier by following the DRY principle.</description>
    </item>
    
    <item>
      <title>A Gentle Introduction to CSS Grid</title>
      <link>https://www.charisseysabel.com/post/2017-10-15-a-gentle-introduction-to-css-grid/</link>
      <pubDate>Sun, 15 Oct 2017 09:00:00 +0000</pubDate>
      
      <guid>https://www.charisseysabel.com/post/2017-10-15-a-gentle-introduction-to-css-grid/</guid>
      <description>I wanted to take a look at CSS Grid for quite a while, so I rebuilt an old project using it.
CSS Grids allow us to design a layout in a 2-dimensional style: horizontally and vertically. Unlike flexbox, which is only focused on only 1 dimension.
I must admit that I was a bit hesitant about the idea of Grid because of the fact that flexbox has solved the problems that I faced with layouts today (at least most of them anyway).</description>
    </item>
    
    <item>
      <title>Test-Driven Development with Mocha and Chai</title>
      <link>https://www.charisseysabel.com/post/2017-09-15-test-driven-development-with-mocha-and-chai/</link>
      <pubDate>Fri, 15 Sep 2017 09:00:00 +0000</pubDate>
      
      <guid>https://www.charisseysabel.com/post/2017-09-15-test-driven-development-with-mocha-and-chai/</guid>
      <description>So what exactly is Test-Driven Development?
Based on my understanding after reading a couple articles, Test-Driven Development (TDD) is the process by which you write tests for your code to make sure that it works as expected. You do this even before you start to write a single line of code and then you allow your code to adapt to the test and make it pass. The benefit of it is that it helps keep your code clean and do what it’s supposed to do.</description>
    </item>
    
    <item>
      <title>The Grunt Task Runner</title>
      <link>https://www.charisseysabel.com/post/2017-08-05-the-grunt-task-runner/</link>
      <pubDate>Sat, 05 Aug 2017 12:00:00 +0000</pubDate>
      
      <guid>https://www.charisseysabel.com/post/2017-08-05-the-grunt-task-runner/</guid>
      <description>Task runners are great for automating tasks. Small, repetitive tasks such as minifying, uglifying or even just watching our files for changes can easily take up our time.
I’ve read some articles online that says automation was once done using shell scripts. I haven’t really tried that myself (but now I’m really curious) but now that frontend technologies have evolved drastically these past few years, task runners like Gulp and Grunt took our frontend environment another step forward.</description>
    </item>
    
    <item>
      <title>Up and Running with Webpack</title>
      <link>https://www.charisseysabel.com/post/2017-07-03-up-and-running-with-webpack/</link>
      <pubDate>Mon, 03 Jul 2017 09:34:24 +0000</pubDate>
      
      <guid>https://www.charisseysabel.com/post/2017-07-03-up-and-running-with-webpack/</guid>
      <description>One of the most important things you have to have in your toolkit these days is the ability to use Webpack — and for a good reason. Webpack is a module bundler. It takes your assets — your JS files, CSS, images, etc — and outputs it as a single file, saving you with tons of trips back and forth from the server.
I gotta admit, the first time I’ve set up my own Webpack configuration file, I was pretty stoked and nervous and overwhelmed at the same time.</description>
    </item>
    
    <item>
      <title>JS Promises</title>
      <link>https://www.charisseysabel.com/post/2017-06-07-js-promises/</link>
      <pubDate>Wed, 07 Jun 2017 09:34:24 +0000</pubDate>
      
      <guid>https://www.charisseysabel.com/post/2017-06-07-js-promises/</guid>
      <description>In the previous post, we used the XMLHttpRequest object which is a very simple and basic way of requesting data from the server. Recently, the ECMAScript 6 introduced a new API called Promises in the hopes of making asynchronous requests more pleasant. We’re gonna take a look at what Promises are and understand them through a little bit of an exercise.
What are Promises? I have to admit that when I first heard someone say, “It returns a Promise”, I immediately go blank.</description>
    </item>
    
    <item>
      <title>Synchronous and Asynchronous Requests in Javascript</title>
      <link>https://www.charisseysabel.com/post/2017-05-07-sync-and-async-requests/</link>
      <pubDate>Sun, 07 May 2017 09:34:24 +0000</pubDate>
      
      <guid>https://www.charisseysabel.com/post/2017-05-07-sync-and-async-requests/</guid>
      <description>There are 2 types of requests that can Javascript can make: Synchronous and Asynchronous. But what is the difference between the two? And how do you make such requests?
The difference between synchronous and asynchronous requests can be best explained by one of the comments from Stack Overflow:
 SYNCHRONOUS
You are in a queue to get a movie ticket. You cannot get one until everybody in front of you gets one, and the same applies to the people queued behind you.</description>
    </item>
    
  </channel>
</rss>